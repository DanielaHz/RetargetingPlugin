#ifndef FACIALLANDMARK_H_
#define FACIALLANDMARK_H_

#include "MathUtils.h"
#include <iostream>
#include <nlohmann/json.hpp>
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include "Side.h"

struct landmarksActionUnit {
    int auId;
    Side side;
    std::vector<int> landmarkIndices; 
};

class FacialLandmark
{
public:
    /**
     * Loads the landmark indices that correspond to specific vertices in the 3D mesh model.
     * 
     * These indices are used to identify which vertices in the mesh represent key facial landmarks 
     * (e.g., eyes, nose, mouth corners). The data is loaded from a JSON file generated during preprocessing.
     * 
     * This mapping is essential for retargeting facial expressions from AI-generated data onto a 3D model.
     */
    bool loadLandmarksMeshIndexFromJSON(const char* landmarksMeshJson);

    /**
     * Loads the landmark indices that correspond to pixel-based positions generated by the AI model.
     * 
     * These indices refer to landmark positions in the 2D space of the portrait image, as interpreted by the AI.
     * The data is loaded from a separate JSON file and is used to align the AI's understanding of facial structure
     * with the 3D mesh representation.
     * 
     * This separation is necessary because the AI model and the 3D mesh use different coordinate systems and indexing.
     */
    bool loadLandmarksPixelIndexFromJSON(const char* landmarksPixelJson);

    // Return the map with the pair landmarks per action unit
    bool loadLandmarksActionUnitsMappingFromJson(const char* landmarksAUJson);

    /**
     * Returns the list of landmark indices for the 3D mesh.
     * 
     * These are the vertex indices in the mesh that correspond to facial landmarks.
     * This data is used during retargeting to apply AI-generated expressions to the correct vertices.
     */
    std::vector<int> getLandmarksMeshIndex();

    /**
     * Returns the list of landmark indices for the pixel-based AI output.
     * 
     * These indices represent the landmark positions in the 2D portrait image space.
     * They are used to interpret the AI's output and map it to the corresponding 3D mesh landmarks.
     */
    std::vector<int> getLandmarksPixelIndex();

    const std::unordered_map <int, std::vector<landmarksActionUnit>> getLandmarksActionUnitMap();

    private:
    std::vector<int> m_landmarksMeshIndex;
    std::vector<int> m_landmarksPixelIndex;
    std::unordered_map <int, std::vector<landmarksActionUnit>> m_landmarksActionUnitMap;
};

#endif